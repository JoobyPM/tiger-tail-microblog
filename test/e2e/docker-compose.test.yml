services:
  # Main application service
  tigertail:
    build:
      context: ../../
      dockerfile: cmd/tigertail/Dockerfile
      no_cache: true
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-tigertail_test}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - SERVER_PORT=${SERVER_PORT:-8080}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:8080/livez || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-tigertail_test}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis cache service
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_test_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test runner service
  test:
    build:
      context: ../../
      dockerfile: test/e2e/Dockerfile.test
    depends_on:
      tigertail:
        condition: service_healthy
    environment:
      - API_URL=http://tigertail:8080
    volumes:
      - ../../:/app
    entrypoint: ["/bin/sh", "-c"]
    command: ["cd /app && go test -v ./test/e2e/..."]

volumes:
  postgres_test_data:
  redis_test_data:
